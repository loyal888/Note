{"objectClass":"NSDictionary","root":{"objectClass":"MindNode","ID":"5QUUH","rootPoint":{"objectClass":"CGPoint","x":360,"y":492.5},"lineColorHex":"#BBBBBB","children":{"0":{"objectClass":"MindNode","ID":"2XRI4","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"N93TC","lineColorHex":"#DC306C","text":"代码更少，可读性更强","remark":"更少的代码与更好的可读性导致更少的错误"},"1":{"objectClass":"MindNode","ID":"4QN6V","lineColorHex":"#DC306C","text":"成熟的语言环境。许多公司都在使用。"},"2":{"objectClass":"MindNode","ID":"6K2FU","lineColorHex":"#DC306C","children":{"0":{"objectClass":"MindNode","ID":"K54RJ","lineColorHex":"#DC306C","text":"什么是命名参数？"},"objectClass":"NSArray"},"text":"Android Jetpack库与其他库的支持。","remark":"KTX扩展为现有android库添加了Kotlin语言新特性。例如：协程、扩展函数、Lambda表达式和命名参数。"},"3":{"objectClass":"MindNode","ID":"7UGV8","lineColorHex":"#DC306C","text":"与Java的互相操作性。","remark":"混合开发，不需要全部迁移到kotlin"},"4":{"objectClass":"MindNode","ID":"7CTVC","lineColorHex":"#DC306C","text":"支持多平台","remark":"可开发 IOS、Web、Server应用"},"objectClass":"NSArray"},"text":"使用kotlin进行android开发的好处？","shrink":true},"1":{"objectClass":"MindNode","ID":"786Y0","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"64K3P","lineColorHex":"#BF58F5","text":"包"},"1":{"objectClass":"MindNode","ID":"3G7C1","lineColorHex":"#BF58F5","text":"程序入口点：main"},"2":{"objectClass":"MindNode","ID":"435T4","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"1N85V","lineColorHex":"#BF58F5","text":"fun sum(a: Int, b: Int): Int {\nreturn a + b\n}","summarizedNodeID":"65265","summarizedText":"等价"},"1":{"objectClass":"MindNode","ID":"65265","lineColorHex":"#BF58F5","text":"fun sum(a: Int, b: Int) = a + b"},"2":{"objectClass":"MindNode","ID":"OAN4D","lineColorHex":"#BF58F5","text":"fun printSum(a: Int, b: Int): Unit {\nprintln(\"sum of $a and $b is ${a + b}\")\n}","summarizedNodeID":"M2FW6","summarizedText":"等价"},"3":{"objectClass":"MindNode","ID":"M2FW6","lineColorHex":"#BF58F5","text":"fun printSum(a: Int, b: Int) {\nprintln(\"sum of $a and $b is ${a + b}\")\n}"},"objectClass":"NSArray"},"text":"函数"},"3":{"objectClass":"MindNode","ID":"8773T","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"BY15P","lineColorHex":"#BF58F5","text":"val ","remark":"定义只读局部变量使⽤关键字 val 定义。只能为其赋值⼀次。"},"1":{"objectClass":"MindNode","ID":"5Q3ZD","lineColorHex":"#BF58F5","text":"var","remark":"可重新赋值的变量使⽤ var 关键字"},"objectClass":"NSArray"},"text":"变量"},"4":{"objectClass":"MindNode","ID":"Q5UT8","lineColorHex":"#BF58F5","text":"注释","remark":"与⼤多数现代语⾔⼀样，Kotlin ⽀持单⾏（或⾏末）与多⾏（块）注释。\n\n// \n\n/**\n*\n*/"},"5":{"objectClass":"MindNode","ID":"MMQPF","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"31J0O","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"EP379","lineColorHex":"#BF58F5","text":"var a = 1\n// 模板中的简单名称：\nval s1 = \"a is $a\"\na = 2\n// 模板中的任意表达式：\nval s2 = \"${s1.replace(\"is\", \"was\")}, but now is $a\""},"objectClass":"NSArray"},"text":"字符串模板"},"objectClass":"NSArray"},"text":"字符串模板"},"6":{"objectClass":"MindNode","ID":"AKV46","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"L194C","lineColorHex":"#BF58F5","text":"fun maxOf(a: Int, b: Int): Int {\nif (a > b) {\nreturn a\n }  else { \n  return b\n }\n}"},"1":{"objectClass":"MindNode","ID":"54567","lineColorHex":"#BF58F5","text":"fun maxOf(a: Int, b: Int) = if (a > b) a else b","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"objectClass":"NSArray"},"text":"条件表达式"},"7":{"objectClass":"MindNode","ID":"MXW39","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"4OY45","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"0F729","lineColorHex":"#BF58F5","text":" fun parseInt(str: String): Int? { // ......\n}"},"1":{"objectClass":"MindNode","ID":"8U8C2","lineColorHex":"#BF58F5","text":"fun printProduct(arg1: String, arg2: String) { val x = parseInt(arg1)\nval y = parseInt(arg2)\n// 直接使用 `x * y` 会导致编译错误，因为它们可能为 null if (x != null && y != null) {\n// 在空检测后，x 与 y 会自动转换为非空值(non-nullable)\n        println(x * y)\n    }\nelse {\nprintln(\"'$arg1' or '$arg2' is not a number\")\n} }"},"objectClass":"NSArray"},"text":"当某个变量的值可以为 null 的时候，必须在声明处的类型后添加 ? 来标识该引用可为空。","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"objectClass":"NSArray"},"text":"空值与 null 检测","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"8":{"objectClass":"MindNode","ID":"3EU4W","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"LU5PK","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"W6679","lineColorHex":"#BF58F5","text":"fun getStringLength(obj: Any): Int? { if (obj is String) {\n// `obj` 在该条件分支内自动转换成 `String`\nreturn obj.length }\n// 在离开类型检测分支后，`obj` 仍然是 `Any` 类型\nreturn null }","summarizedNodeID":"VWC41","summarizedText":"="},"1":{"objectClass":"MindNode","ID":"ZVBU5","lineColorHex":"#BF58F5","text":"fun getStringLength(obj: Any): Int? { if (obj !is String) return null\n// `obj` 在这一分支自动转换为 `String`\nreturn obj.length }"},"2":{"objectClass":"MindNode","ID":"VWC41","lineColorHex":"#BF58F5","text":"fun getStringLength(obj: Any): Int? {\n// `obj` 在 `&&` 右边自动转换成 `String` 类型 if (obj is String && obj.length > 0) {\nreturn obj.length }\nreturn null }"},"objectClass":"NSArray"},"text":"is 运算符检测一个表达式是否某类型的一个实例。如果一个不可变的局部变量或属性已经判断出为某类型，那么检测 后的分支中可以直接当作该类型使用，无需显式转换"},"objectClass":"NSArray"},"text":"类型检测与自动类型转换"},"9":{"objectClass":"MindNode","ID":"C8B7O","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"FCQGQ","lineColorHex":"#BF58F5","text":"val items = listOf(\"apple\", \"banana\", \"kiwifruit\") \nfor (item in items) {\n    println(item)\n}","summarizedNodeID":"B2TT9","summarizedText":"="},"1":{"objectClass":"MindNode","ID":"B2TT9","lineColorHex":"#BF58F5","text":"val items = listOf(\"apple\", \"banana\", \"kiwifruit\") \nfor (index in items.indices) {\n  println(\"item at $index is ${items[index]}\")\n}"},"objectClass":"NSArray"},"text":"for 循环"},"10":{"objectClass":"MindNode","ID":"J46J4","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"47G06","lineColorHex":"#BF58F5","text":"val items = listOf(\"apple\", \"banana\", \"kiwifruit\") var index = 0\nwhile (index < items.size) {\nprintln(\"item at $index is ${items[index]}\")\nindex++ }"},"objectClass":"NSArray"},"text":"while 循环"},"11":{"objectClass":"MindNode","ID":"2FM5L","lineColorHex":"#BF58F5","text":"when 表达式"},"12":{"objectClass":"MindNode","ID":"32918","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"9JL8V","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"411FR","lineColorHex":"#BF58F5","text":"val x = 10\nval y = 9\nif (x in 1..y+1) {\n   println(\"fits in range\") \n}"},"objectClass":"NSArray"},"text":"in","remark":"使用 in 运算符来检测某个数字是否在指定区间内:"},"1":{"objectClass":"MindNode","ID":"K6FH7","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"E9YG8","lineColorHex":"#BF58F5","text":"val list = listOf(\"a\", \"b\", \"c\")\nif (-1 !in 0..list.lastIndex) { println(\"-1 is out of range\")\n}\nif (list.size !in list.indices) {\nprintln(\"list size is out of valid list indices range, too\") }"},"objectClass":"NSArray"},"text":"!in","remark":"检测某个数字是否在指定区间外:"},"2":{"objectClass":"MindNode","ID":"UT0C2","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"AL6NY","lineColorHex":"#BF58F5","text":" for (x in 1..5) {\n    print(x)\n}"},"objectClass":"NSArray"},"text":"区间迭代"},"3":{"objectClass":"MindNode","ID":"YI7LN","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"SAVU4","lineColorHex":"#BF58F5","text":"for (x in 1..10 step 2) {\n print(x)\n}\n\nfor (x in 9 downTo 0 step 3) {\nprintln(x)\n}\n"},"objectClass":"NSArray"},"text":"数列迭代"},"4":{"objectClass":"MindNode","ID":"JL675","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"22BI4","lineColorHex":"#BF58F5","text":" for (item in items) { \n   println(item)\n}"},"1":{"objectClass":"MindNode","ID":"QNF17","lineColorHex":"#BF58F5","children":{"0":{"objectClass":"MindNode","ID":"T77AN","lineColorHex":"#BF58F5","text":"val fruits = listOf(\"banana\", \"avocado\", \"apple\", \"kiwifruit\") \nfruits\n.filter { it.startsWith(\"a\") } \n.sortedBy { it }\n.map { it.toUpperCase() } \n.forEach { println(it) }"},"objectClass":"NSArray"},"text":"使用 lambda 表达式来过滤(filter)与映射(map)集合:","maxWidthLine":344},"objectClass":"NSArray"},"text":"集合"},"objectClass":"NSArray"},"text":"使用区间(range)"},"objectClass":"NSArray"},"text":"基本语法","shrink":true},"2":{"objectClass":"MindNode","ID":"82GQ6","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"1425V","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"17VZN","lineColorHex":"#26BBFF","text":"data class Customer(val name: String, val email: String)","remark":"为 Customer 类提供以下功能:\n— 所有属性的getters(对于var定义的还有setters) — equals()\n— hashCode()\n— toString()\n— copy()\n— 所有属性的 component1() 、component2() ......等等"},"objectClass":"NSArray"},"text":"创建 DTOs(POJOs/POCOs)"},"1":{"objectClass":"MindNode","ID":"Q0EF5","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"4125N","lineColorHex":"#26BBFF","text":"fun foo(a: Int = 0, b: String = \"\") { ...... }"},"objectClass":"NSArray"},"text":"函数的默认参数"},"2":{"objectClass":"MindNode","ID":"KX7LX","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"HW4SX","lineColorHex":"#26BBFF","text":"val positives = list.filter { x -> x > 0 }\nor\nval positives = list.filter { it > 0 }"},"objectClass":"NSArray"},"text":"过滤 list"},"3":{"objectClass":"MindNode","ID":"FDDKR","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"112G8","lineColorHex":"#26BBFF","text":"if (\"john@example.com\" in emailsList) { ...... } \n\nif (\"jane@example.com\" !in emailsList) { ...... }"},"objectClass":"NSArray"},"text":"检测元素是否存在于集合中"},"4":{"objectClass":"MindNode","ID":"K846D","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"IT4JM","lineColorHex":"#26BBFF","text":"println(\"Name $name\")"},"objectClass":"NSArray"},"text":"字符串内插"},"5":{"objectClass":"MindNode","ID":"HK570","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"M57BY","lineColorHex":"#26BBFF","text":" for ((k, v) in map) { \n    println(\"$k -> $v\")\n}"},"objectClass":"NSArray"},"text":"遍历 map/pair型list"},"6":{"objectClass":"MindNode","ID":"P6KXO","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"D4FQ2","lineColorHex":"#26BBFF","text":"for (i in 1..100) { ...... } // 闭区间:包含 100\nfor (i in 1 until 100) { ...... } // 半开区间:不包含 100 for (x in 2..10 step 2) { ...... }\nfor (x in 10 downTo 1) { ...... }\nif (x in 1..10) { ...... }"},"objectClass":"NSArray"},"text":"使用区间"},"7":{"objectClass":"MindNode","ID":"OW505","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"TD0G0","lineColorHex":"#26BBFF","text":"val list = listOf(\"a\", \"b\", \"c\")"},"1":{"objectClass":"MindNode","ID":"5WGL8","lineColorHex":"#26BBFF","text":"val map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)"},"2":{"objectClass":"MindNode","ID":"83H72","lineColorHex":"#26BBFF","text":""},"objectClass":"NSArray"},"text":"只读 list、map"},"8":{"objectClass":"MindNode","ID":"89K5M","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"5514Q","lineColorHex":"#26BBFF","text":" println(map[\"key\"]) \nmap[\"key\"] = value"},"objectClass":"NSArray"},"text":"访问 map"},"9":{"objectClass":"MindNode","ID":"901ND","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"F2D30","lineColorHex":"#26BBFF","text":" val p: String by lazy { // 计算该字符串\n}"},"1":{"objectClass":"MindNode","ID":"CQ4W4","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"828O2","lineColorHex":"#26BBFF","text":"lateinit 只用于变量 var，而 lazy 只用于常量 val"},"1":{"objectClass":"MindNode","ID":"2LL88","lineColorHex":"#26BBFF","text":"lazy()是接受一个 lambda 并返回一个 Lazy <T> 实例的函数，返回的实例可以作为实现延迟属性的委托： 第一次调用 get() 会执行已传递给 lazy() 的 lambda 表达式并记录结果， 后续调用 get() 只是返回记录的结果"},"objectClass":"NSArray"},"text":"lazy和lateinit var 区别？","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"objectClass":"NSArray"},"text":"延迟属性"},"10":{"objectClass":"MindNode","ID":"3R4UV","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"3BN8S","lineColorHex":"#26BBFF","text":" fun String.spaceToCamelCase() { ...... }"},"objectClass":"NSArray"},"text":"扩展函数"},"11":{"objectClass":"MindNode","ID":"U284E","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"OJ741","lineColorHex":"#26BBFF","text":" object Resource {\n    val name = \"Name\"\n  }"},"objectClass":"NSArray"},"text":"创建单例"},"12":{"objectClass":"MindNode","ID":"72P2H","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"78U17","lineColorHex":"#26BBFF","text":"val files = File(\"Test\").listFiles() \n\nprintln(files?.size)"},"objectClass":"NSArray"},"text":"If not null 缩写","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"13":{"objectClass":"MindNode","ID":"QCRUY","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"98C58","lineColorHex":"#26BBFF","text":"val files = File(\"Test\").listFiles() \nprintln(files?.size ?: \"empty\")"},"objectClass":"NSArray"},"text":"If not null and else 缩写","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"14":{"objectClass":"MindNode","ID":"6OW22","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"DX6J9","lineColorHex":"#26BBFF","text":"val values = ......\nval email = values[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")"},"objectClass":"NSArray"},"text":"if null 执行一个语句","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"15":{"objectClass":"MindNode","ID":"HG6Q7","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"4B3QM","lineColorHex":"#26BBFF","text":"val emails = ...... // 可能会是空集合\nval mainEmail = emails.firstOrNull() ?: \"\""},"objectClass":"NSArray"},"text":"在可能会空的集合中取第一元素"},"16":{"objectClass":"MindNode","ID":"74R88","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"2Q425","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"1337V","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"6A46E","lineColorHex":"#26BBFF","text":"let: T -> R"},"1":{"objectClass":"MindNode","ID":"3B257","lineColorHex":"#26BBFF","text":"apply: 返回本身；即建造者模式;\n用于配置对象的属性","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"2":{"objectClass":"MindNode","ID":"O24O6","lineColorHex":"#26BBFF","text":"run函数和apply函数很像，只不过run函数是使用最后一行的返回，apply返回当前自己的对象。"},"objectClass":"NSArray"},"text":"let 和 apply的区别?"},"objectClass":"NSArray"},"text":"val value = ......\nvalue?.let {\n...... // 代码会执行到此处, 假如data不为null\n}"},"objectClass":"NSArray"},"text":"if not null 执行代码"},"17":{"objectClass":"MindNode","ID":"K4O14","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"GCQ7X","lineColorHex":"#26BBFF","text":"val value = ......\nval mapped = value?.let { transformValue(it) } ?: defaultValue // 如果该值或其转换结果为空，那么返回 defaultValue。"},"objectClass":"NSArray"},"text":"映射可空值(如果非空的话)"},"18":{"objectClass":"MindNode","ID":"55PXJ","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"TB36Y","lineColorHex":"#26BBFF","text":"fun transform(color: String): Int { return when (color) {\n\"Red\" -> 0\n\"Green\" -> 1\n\"Blue\" -> 2\nelse -> throw IllegalArgumentException(\"Invalid color param value\")\n} }"},"objectClass":"NSArray"},"text":"返回 when 表达式"},"19":{"objectClass":"MindNode","ID":"SE0E1","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"K38NE","lineColorHex":"#26BBFF","text":"fun test() {\nval result = try {\ncount()\n} catch (e: ArithmeticException) {\nthrow IllegalStateException(e) }\n// 使用 result }"},"objectClass":"NSArray"},"text":"“try/catch”表达式"},"20":{"objectClass":"MindNode","ID":"H3F43","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"71T4I","lineColorHex":"#26BBFF","text":"fun foo(param: Int) {\nval result = if (param == 1) {\n\"one\"\n} else if (param == 2) {\n\"two\"\n} else { \"three\"\n} }"},"objectClass":"NSArray"},"text":"“if”表达式"},"21":{"objectClass":"MindNode","ID":"534E0","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"1WW9S","lineColorHex":"#26BBFF","text":" fun arrayOfMinusOnes(size: Int): IntArray { return IntArray(size).apply { fill(-1) }\n}"},"objectClass":"NSArray"},"text":"返回类型为 Unit 的方法的 Builder ⻛格用法"},"22":{"objectClass":"MindNode","ID":"66344","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"OV2KY","lineColorHex":"#26BBFF","text":"fun theAnswer() = 42"},"1":{"objectClass":"MindNode","ID":"HF99T","lineColorHex":"#26BBFF","text":"  fun theAnswer(): Int { return 42 }"},"2":{"objectClass":"MindNode","ID":"152W3","lineColorHex":"#26BBFF","text":"fun transform(color: String): Int = when (color) { \"Red\" -> 0\n\"Green\" -> 1\n\"Blue\" -> 2\nelse -> throw IllegalArgumentException(\"Invalid color param value\")\n}"},"objectClass":"NSArray"},"text":"单表达式函数"},"23":{"objectClass":"MindNode","ID":"LP4RQ","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"Y06O6","lineColorHex":"#26BBFF","text":"class Turtle { fun penDown()\nfun penUp()\nfun turn(degrees: Double) fun forward(pixels: Double)\n}\nval myTurtle = Turtle()\nwith(myTurtle) { // 画一个 100 像素的正方形\npenDown()\nfor (i in 1..4) {\nforward(100.0)\nturn(90.0) }\npenUp()\n}"},"objectClass":"NSArray"},"text":"对一个对象实例调用多个方法(with)"},"24":{"objectClass":"MindNode","ID":"8A8ZY","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"U141T","lineColorHex":"#26BBFF","text":"val myRectangle = Rectangle().apply { \n    length = 4\n    breadth = 5\n    color = 0xFAFAFA\n}"},"objectClass":"NSArray"},"text":"配置对象的属性(apply)"},"25":{"objectClass":"MindNode","ID":"P2A5L","lineColorHex":"#26BBFF","children":{"0":{"objectClass":"MindNode","ID":"N2X50","lineColorHex":"#26BBFF","text":"val b: Boolean? = ...... if (b == true) {\n......\n} else {\n// `b` 是 false 或者 null\n}"},"objectClass":"NSArray"},"text":"用可空布尔"},"26":{"objectClass":"MindNode","ID":"EYREF","lineColorHex":"#26BBFF","text":"交换两个变量"},"objectClass":"NSArray"},"text":"习惯用法","shrink":true},"3":{"objectClass":"MindNode","ID":"JN67O","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"5HT74","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"1WX3L","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"1F9JC","lineColorHex":"#37C45A","text":"如果 Kotlin 文件包含单个类(以及可能相关的顶层声明)，那么文件名应该与该类的名称相同，并追加 .kt 扩展名。如果 文件包含多个类或只包含顶层声明，那么选择一个描述该文件所包含内容的名称，并以此命名该文件。使用首字母大 写的驼峰⻛格(例如 ProcessDeclarations.kt)。\n文件的名称应该描述文件中代码的作用。因此，应避免在文件名中使用诸如“Util”之类的无意义词语。"},"objectClass":"NSArray"},"text":"源文件名称","shrink":true},"1":{"objectClass":"MindNode","ID":"8IEH3","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"Z9603","lineColorHex":"#37C45A","text":"鼓励多个声明(类、顶级函数或者属性)放在同一个 Kotlin 源文件中，只要这些声明在语义上彼此紧密关联并且文件保 持合理大小(不超过几百行)。"},"objectClass":"NSArray"},"text":"源文件组织","shrink":true},"2":{"objectClass":"MindNode","ID":"WQ6MB","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"0R1G0","lineColorHex":"#37C45A","text":"通常，一个类的内容按以下顺序排列:\n— 属性声明与初始化块 — 次构造函数\n— 方法声明\n— 伴生对象","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"1":{"objectClass":"MindNode","ID":"3180C","lineColorHex":"#37C45A","text":"将嵌套类放在紧挨使用这些类的代码之后。如果打算在外部使用嵌套类，而且类中并没有引用这些类，那么把它们放到 末尾，在伴生对象之后。"},"objectClass":"NSArray"},"text":"类布局","shrink":true,"style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"3":{"objectClass":"MindNode","ID":"37KJN","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"1Y54P","lineColorHex":"#37C45A","text":"在实现一个接口时，实现成员的顺序应该与该接口的成员顺序相同"},"objectClass":"NSArray"},"text":"接口实现布局","shrink":true},"4":{"objectClass":"MindNode","ID":"47K06","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"0GH2X","lineColorHex":"#37C45A","text":"在类中总是将重载放在一起。"},"objectClass":"NSArray"},"text":"重载布局","shrink":true},"5":{"objectClass":"MindNode","ID":"GRQM8","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"TJGN8","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"YK8N8","lineColorHex":"#37C45A","text":"org.example.project"},"1":{"objectClass":"MindNode","ID":"028RD","lineColorHex":"#37C45A","text":"org.example.myProject"},"objectClass":"NSArray"},"text":"包:包的名称总是小写且不使用下划线"},"1":{"objectClass":"MindNode","ID":"Z9757","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"GQJ3T","lineColorHex":"#37C45A","text":" open class DeclarationProcessor { }"},"objectClass":"NSArray"},"text":"类与对象的名称以大写字母开头并使用驼峰⻛格"},"objectClass":"NSArray"},"text":"命名规则","shrink":true},"6":{"objectClass":"MindNode","ID":"625JO","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"4BQ63","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"OU4ZF","lineColorHex":"#37C45A","text":" const val MAX_COUNT = 8","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"1":{"objectClass":"MindNode","ID":"Y5S8E","lineColorHex":"#37C45A","text":"val USER_NAME_FIELD = \"UserName\"","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"objectClass":"NSArray"},"text":"常量名称(标有 const 的属性，或者保存不可变数据的没有自定义 get 函数的顶层/对象 val 属性)应该使用大 写、下划线分隔的名称","maxWidthLine":307},"1":{"objectClass":"MindNode","ID":"5N47A","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"4WIKF","lineColorHex":"#37C45A","text":"val mutableCollection: MutableSet<String> = HashSet()"},"objectClass":"NSArray"},"text":"保存带有行为的对象或者可变数据的顶层/对象属性的名称应该使用驼峰⻛格名称"},"2":{"objectClass":"MindNode","ID":"S2NY7","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"KBF1W","lineColorHex":"#37C45A","text":"val PersonComparator: Comparator<Person> = /*...*/","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"objectClass":"NSArray"},"text":"保存单例对象引用的属性的名称可以使用与 object 声明相同的命名⻛格"},"3":{"objectClass":"MindNode","ID":"640C3","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"3LN4Q","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"OV1LO","lineColorHex":"#37C45A","text":"class C {\n  private val _elementList = mutableListOf<Element>()\n  val elementList: List<Element> get() = _elementList\n}"},"objectClass":"NSArray"},"text":"如果一个类有两个概念上相同的属性，一个是公共 API 的一部分，另一个是实现细节，那么使用下划线作为私有属性名 称的前缀"},"objectClass":"NSArray"},"text":"幕后属性的名称","style2":{"objectClass":"NSDictionary","color":"#FF0000"}},"objectClass":"NSArray"},"text":"属性名","shrink":true},"7":{"objectClass":"MindNode","ID":"80DC2","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"H52PX","lineColorHex":"#37C45A","children":{"0":{"objectClass":"MindNode","ID":"M8D2H","lineColorHex":"#37C45A","text":"if (elements != null) {\n for (element in elements) {\n// ......\n } \n}"},"objectClass":"NSArray"},"text":"使用 4 个空格缩进。不要使用 tab。\n对于花括号，将左花括号放在结构起始处的行尾，而将右花括号放在与左括结构横向对⻬的单独一行。"},"objectClass":"NSArray"},"text":"格式化"},"objectClass":"NSArray"},"text":"源代码组织"},"objectClass":"NSArray"},"text":"编码规范","shrink":true},"4":{"objectClass":"MindNode","ID":"2M495","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"BY691","lineColorHex":"#1BD6E7","text":"arrayOf(1, 2, 3) 或者 arrayOfNulls() 可以用于创建一个指定大小的、所有元素都为空的数组"},"1":{"objectClass":"MindNode","ID":"0L34M","lineColorHex":"#1BD6E7","text":" // 创建一个 Array<String> 初始化为 [\"0\", \"1\", \"4\", \"9\", \"16\"] \nval asc = Array(5) { i -> (i * i).toString() }\nasc.forEach { println(it) }"},"2":{"objectClass":"MindNode","ID":"1X9F1","lineColorHex":"#1BD6E7","children":{"0":{"objectClass":"MindNode","ID":"7BUSO","lineColorHex":"#1BD6E7","text":"val x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]"},"1":{"objectClass":"MindNode","ID":"78WHJ","lineColorHex":"#1BD6E7","text":"// 大小为 5、值为 [0, 0, 0, 0, 0] 的整型数组 \nval arr = IntArray(5)\n// 例如:用常量初始化数组中的值\n// 大小为 5、值为 [42, 42, 42, 42, 42] 的整型数组 \nval arr = IntArray(5) { 42 }\n// 例如:使用 lambda 表达式初始化数组中的值\n// 大小为 5、值为 [0, 1, 2, 3, 4] 的整型数组(值初始化为其索引值) \nvar arr = IntArray(5) { it * 1 }\n"},"objectClass":"NSArray"},"text":"原生类型数组","remark":"Kotlin 也有无装箱开销的专⻔的类来表示原生类型数组: ByteArray 、ShortArray 、IntArray 等等。这些类与 Array 并没有继承关系，但是它们有同样的方法属性集。它们也都有相应的工厂方法:"},"objectClass":"NSArray"},"text":"数组"},"objectClass":"NSArray"},"text":"Kotlin","remark":"在Kotlin中所有类都有一个共同的超类 Any，这对于没有超类型声明的类是默认超类\n\n关键字 var 声明为可变的，也可以用关键字 val 声明为只读的"},"ID":"7WU34"}